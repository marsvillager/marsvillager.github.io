import{_ as l,o as s,c as a,O as o}from"./chunks/framework.aacc0fa0.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"library.md"}'),e={name:"library.md"},n=o(`<div class="info custom-block"><p class="custom-block-title">INFO</p><p>杂谈</p></div><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>how to create and use program libraries on Linux using the GNU toolset</p><h2 id="program-libraries" tabindex="-1">Program libraries <a class="header-anchor" href="#program-libraries" aria-label="Permalink to &quot;Program libraries&quot;">​</a></h2><h3 id="static-libraries" tabindex="-1">static libraries <a class="header-anchor" href="#static-libraries" aria-label="Permalink to &quot;static libraries&quot;">​</a></h3><ol><li>be installed into a program executable before the program can be run</li><li>permit users to link to programs without having to recompile its code</li><li>simply a collection of ordinary object files, end with the &#39;&#39;.a&#39;&#39; suffix</li><li>编译生成目标文件 <code>gcc -c hello.c -o hello.o</code></li><li>use ar (archiver) program to create a static library: <code>ar rcs libhello.a hello1.o hello2.o</code>, add the object files file1.o and file2.o to the static library libhello.a, creating libhello.a if it doesn&#39;t already exist</li><li>use gcc to generate your executable, use the -l option to specify the library: <code>gcc hello.c -L. -lhello –o hello</code></li></ol><h3 id="shared-libraries" tabindex="-1">shared libraries <a class="header-anchor" href="#shared-libraries" aria-label="Permalink to &quot;shared libraries&quot;">​</a></h3><ol><li><p>be loaded at program start-up and shared between programs</p></li><li><p>start with the &quot;lib&quot; prefix, end with the &#39;&#39;.so&#39;&#39; suffix (SONAME, Shared Object Name), e.g. <code>libexample.so.1</code> 表示这个库的主要版本号是 1, 如果在将来进行重大更改并发布了一个不兼容的新版本, 可以将 SONAME 更改为 <code>libexample.so.2</code></p></li><li><p>执行动态链接库管理命令 <code>sudo ldconfig</code> (load configuration), 追加库文件 /usr/local/mysql/lib 到 /etc/ld.so.conf 文件中 <code>echo &quot;/usr/local/mysql/lib&quot; &gt;&gt;/etc/ld.so.conf</code></p></li><li><p>create a Shared Library: <code>gcc -shared -Wl,-soname,your_soname -o library_name file_list library_list</code>,</p><p>e.g. create two object files (a.o and b.o) and then creates a shared library that contains both of them</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">gcc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-fPIC</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-Wall</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a.c</span></span>
<span class="line"><span style="color:#FFCB6B;">gcc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-fPIC</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-Wall</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">b.c</span></span>
<span class="line"><span style="color:#FFCB6B;">gcc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-shared</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-fPIC</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-Wl,-soname,libmystuff.so.1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">libmystuff.so.1.0.1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a.o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">b.o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-lc</span></span></code></pre></div><p>clang <code>clang -shared -fPIC foo.c -o libfoo.so</code></p><p>windows <code>gcc -shared -fPIC foo.c -o libfoo.dll</code></p></li><li><p>install and use a Shared Library</p><ul><li><p><code>ldconfig -n directory_with_shared_libraries</code></p></li><li><p><code>LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH my_program</code></p></li><li><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/bin/sh</span></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> LD_LIBRARY_PATH</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">/usr/local/my_lib:</span><span style="color:#A6ACCD;">$LD_LIBRARY_PATH</span></span>
<span class="line"><span style="color:#82AAFF;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/bin/my_program.orig</span><span style="color:#A6ACCD;"> $*</span></span></code></pre></div></li><li><p><code> ldd /bin/ls</code></p></li></ul></li></ol><h3 id="dynamically-loaded-dl-libraries" tabindex="-1">dynamically loaded (DL) libraries <a class="header-anchor" href="#dynamically-loaded-dl-libraries" aria-label="Permalink to &quot;dynamically loaded (DL) libraries&quot;">​</a></h3><ol><li><p>be loaded and used at any time while a program is running, 在不重启程序的情况下, 实现模块的重新加载, 即热更新</p></li><li><p>both static and shared libraries can be used as DL libraries, the difference is in how DL libraries are used by programmers</p></li><li><p>dlopen function opens a library and prepares it for use, <code>void * dlopen(const char *filename, int flag);</code></p><p>e.g.</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">handle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">dlopen</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/lib/libm.so.6</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> RTLD_LAZY</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">dlclose</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">handle</span><span style="color:#89DDFF;">);</span></span></code></pre></div></li><li><p>if this program were in a file named &quot;foo.c&quot;, we can use <code>-ldl</code> to load library:<code>gcc -o foo foo.c -ldl</code></p></li></ol><h2 id="tools" tabindex="-1">Tools <a class="header-anchor" href="#tools" aria-label="Permalink to &quot;Tools&quot;">​</a></h2><h3 id="nm" tabindex="-1">nm <a class="header-anchor" href="#nm" aria-label="Permalink to &quot;nm&quot;">​</a></h3><p>name list，列出 .o, .a, .so 中的符号信息，即定义的函数、全局变量等等</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">nm [option(s)] [file(s)]</span></span>
<span class="line"><span style="color:#A6ACCD;">-A 在每个符号信息的前面打印所在对象文件名称；</span></span>
<span class="line"><span style="color:#A6ACCD;">-C 输出demangle过了的符号名称；</span></span>
<span class="line"><span style="color:#A6ACCD;">-D 打印动态符号；</span></span>
<span class="line"><span style="color:#A6ACCD;">-l 使用对象文件中的调试信息打印出所在源文件及行号；</span></span>
<span class="line"><span style="color:#A6ACCD;">-n 按照地址/符号值来排序；</span></span>
<span class="line"><span style="color:#A6ACCD;">-u 打印出那些未定义的符号。</span></span></code></pre></div><p>常见的符号类型：</p><ul><li>A 该符号的值在今后的链接中将不再改变；</li><li>B 该符号放在 BSS 段中，通常是那些未初始化的全局变量；</li><li>D 该符号放在普通的数据段中，通常是那些已经初始化的全局变量；</li><li>T 该符号放在代码段中，通常是那些全局非静态函数；</li><li>U 该符号未定义过，需要自其他对象文件中链接进来；</li><li>W 未明确指定的弱链接符号；同链接的其他对象文件中有它的定义就用上，否则就用一个系统特别指定的默认值。</li></ul><h3 id="gnu-libtool" tabindex="-1">GNU libtool <a class="header-anchor" href="#gnu-libtool" aria-label="Permalink to &quot;GNU libtool&quot;">​</a></h3><p><a href="###shared libraries">shared libraries</a> 中</p><ul><li>linux <code>gcc -shared -fPIC foo.c -o libfoo.so</code></li><li>clang <code>clang -shared -fPIC foo.c -o libfoo.so</code></li><li>windows <code>gcc -shared -fPIC foo.c -o libfoo.dll</code></li></ul><p>如果想让 foo 库能够跨平台运行，那么就不得不为每一个特定的平台提供相应的编译命令或脚本，这意味着必须知道各个平台在共享库支持方面的差异及处理方式</p><p>gcc 编译生成共享库的命令可以粗略的拆分为两步：编译与连接</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">gcc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-fPIC</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">foo.c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">libfoo.o</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">#编译</span></span>
<span class="line"><span style="color:#FFCB6B;">gcc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-shared</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">libfoo.o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">libfoo.so</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">#连接</span></span></code></pre></div><p>libtool 实现：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">libtool</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--tag=CC</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--mode=compile</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gcc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">foo.c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">libfoo.lo</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 编译，libfoo.lo 对应 libfoo.o</span></span>
<span class="line"><span style="color:#FFCB6B;">libtool</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--tag=CC</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--mode=link</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gcc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">libfoo.lo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rpath</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/lib</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">libfoo.la</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 连接，libfoo.la 对应 libfoo.so</span></span></code></pre></div><p><code>--tag</code> 选项用于告诉 libtool 要编译的库是用什么语言写的</p><table><thead><tr><th style="text-align:center;">tag</th><th style="text-align:center;">language</th></tr></thead><tbody><tr><td style="text-align:center;">CC</td><td style="text-align:center;">C</td></tr><tr><td style="text-align:center;">CXX</td><td style="text-align:center;">C++</td></tr><tr><td style="text-align:center;">GCJ</td><td style="text-align:center;">Java</td></tr><tr><td style="text-align:center;">F77</td><td style="text-align:center;">Fortran 77</td></tr><tr><td style="text-align:center;">FC</td><td style="text-align:center;">Fortran</td></tr><tr><td style="text-align:center;">GO</td><td style="text-align:center;">Go</td></tr><tr><td style="text-align:center;">RC</td><td style="text-align:center;">Windows Resource</td></tr></tbody></table><p><code>--mode</code> 选项用于设定 libtool 的工作模式：</p><ul><li><code>--mode=compile</code> 编译</li><li><code>--mode=link</code> 连接</li><li><code>--mode=install</code> 安装</li><li><code>--mode=uninstall</code> 卸载</li><li><code>--mode=clean</code> 清理</li></ul><p>事实上，很少有人去用 libtool 来安装库。大部分情况下，libtool 是与 GNU Autotools 配合使用的。更正确的说法是，libtool 属于 GNU Autotools。</p><p>简单的说，GNU Autotools 就是产生两份文件，一份文件是 configure，用于检测项目构建（预处理、编译、连接、安装）环境是否完备；另一份文件是 Makefile，用于项目的构建。如果我们的项目是开发一个库，那么一旦有了 GNU Autotools 生成的 Makefile，编译与安装这个库的命令通常是：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">.</span><span style="color:#FFCB6B;">/configure</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;"># 检测构建环境</span></span>
<span class="line"><span style="color:#FFCB6B;">make</span><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;"># 编译、连接</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;"># 安装</span></span></code></pre></div><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h2><ul><li><a href="https://dwheeler.com/program-library/Program-Library-HOWTO/t1.html" target="_blank" rel="noreferrer">https://dwheeler.com/program-library/Program-Library-HOWTO/t1.html</a></li><li><a href="https://www.bilibili.com/read/cv27486835/" target="_blank" rel="noreferrer">https://www.bilibili.com/read/cv27486835/</a></li><li><a href="https://blog.csdn.net/qq_28087491/article/details/121437727" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_28087491/article/details/121437727</a></li><li><a href="https://zhuanlan.zhihu.com/p/35847200?utm_id=0" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/35847200?utm_id=0</a></li></ul>`,33),t=[n];function r(p,c,i,d,C,y){return s(),a("div",null,t)}const b=l(e,[["render",r]]);export{A as __pageData,b as default};
